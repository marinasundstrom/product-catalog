@page "/products/{productId}/edit"
@layout PageLayout
@inject NavigationManager NavigationManager
@inject IProductsClient ProductsClient
@inject IModalService ModalService
@inject IToastService ToastService

<PageTitle>Product</PageTitle>

@if (product is null)
{
    <span>Loading...</span>
}
else
{
    <PageTitle>@product.Name (@product.Sku)</PageTitle>

    <h3>@product.Name</h3>
    <a href="#" @onclick:preventDefault @onclick="EditDetails"><i class="oi oi-pencil"></i></a>

    <div class="card mb-2">
        <div class="card-body">
            <h5 class="card-title">
                Details
            </h5>
            <dl>
                @if (!string.IsNullOrEmpty(product.Description))
                {
                    <dt>Description</dt>
                    <dd>@product.Description</dd>
                }

                @if (product.Group is not null)
                {
                    <dt>Group</dt>
                    <dd>@product.Group.Name</dd>
                }

                @if (!string.IsNullOrEmpty(product.Sku))
                {
                    <dt>SKU</dt>
                    <dd>@product.Sku</dd>
                }

                @if (product.Price is not null)
                {
                    <dt>Price</dt>
                    <dd>@product.Price?.ToString("c")</dd>
                }
            </dl>
        </div>
    </div>


    <div class="form-group mb-4">
        <label>Visibility</label>
        <MySelect TItem="ProductVisibility?" Items="@VisibilityOptions" Value="@product.Visibility" ValueChanged="async (e) => await UpdateVisibility((ProductVisibility?)e)" Selector="(x) => x">

        </MySelect>
    </div>

    <h4>Options</h4>

    <div>
        <button class="btn btn-secondary me-2" @onclick="CreateOption"><i class="oi oi-plus" /> Create option</button>
        <a class="btn btn-secondary" href="/products/@product.Id/options/groups">Option groups</a>
    </div>

    if (options is not null)
    {
        @foreach (var group in options
    .ToList()
    .GroupBy(x => x.Group?.Name))
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>@(group.Key ?? "Option")</th>
                        <th>Multiple values</th>
                        <th>Values</th>
                        <th>Default value</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var option in group)
                    {
                        <tr>
                            <td>@option.Name</td>
                            <td>@(option.OptionType == OptionType.Multiple)</td>
                            <td>@string.Join(", ", option.Values.Select(x => x.Name))</td>
                            <td>@option.DefaultValue?.Name</td>
                            <td>
                                <a href="#" @onclick:preventDefault @onclick="async () => await UpdateOption(option)"><i class="oi oi-pencil"></i></a>
                                <a href="#" @onclick:preventDefault @onclick="async () => await DeleteOption(option)"><i class="oi oi-trash"></i></a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    }

    @if (product.HasVariants)
    {

        <h4 class="mt-4">Variants</h4>

        @if (!options.Any())
        {
            <span>Add options before creating variants</span>
        }
        else
        {
            <button class="btn btn-secondary" @onclick="CreateVariant"><i class="oi oi-plus" /> Create variant</button>

            @if (variants is not null)
            {
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>SKU</th>
                            <th>Price</th>

                            @if (variants is not null && variants.Any())
                            {
                                @foreach (var option in variants.First().Options)
                                {
                                    <th>@option.Name</th>
                                }
                            }

                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (variants is not null)
                        {
                            @foreach (var variant in variants)
                            {
                                <tr>
                                    <td>@variant.Name</td>
                                    <td>@variant.Sku</td>
                                    <td>@variant.Price?.ToString("c")</td>

                                    @if (variant.Options is not null)
                                    {
                                        foreach (var option in variant.Options)
                                        {
                                            <td>@option.Value</td>
                                        }
                                    }

                                    <td>
                                        <a href="#" @onclick:preventDefault @onclick="async () => await UpdateVariant(variant)"><i class="oi oi-pencil"></i></a>
                                        <a href="#" @onclick:preventDefault @onclick="async () => await DeleteVariant(variant)"><i class="oi oi-trash"></i></a>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            }
        }
    }
}

@code
{
    ApiProduct? product;
    List<ApiProductVariant>? variants;
    List<ApiOption>? options;

    public IList<ProductVisibility?> VisibilityOptions { get; } = Enum.GetValues<ProductVisibility>().Select(x => (ProductVisibility?)x).ToArray();

    [Parameter]
    public string? ProductId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        product = await ProductsClient.GetProductAsync(ProductId);
        options = (await ProductsClient.GetProductOptionsAsync(ProductId)).ToList();

        variants = (await ProductsClient.GetVariantsAsync(ProductId)).ToList();
    }

    async Task UpdateVisibility(ProductVisibility? value)
    {
        try
        {
            await ProductsClient.UpdateProductVisibilityAsync(ProductId, value.GetValueOrDefault());

            product.Visibility = value;

            ToastService.ShowInfo($"The product \"{product.Name}\" is now {product.Visibility.ToString().ToLower()}.");
        }
        catch (Exception exc)
        {
            ToastService.ShowError(exc.Message, "Exception");
        }
    }

    async Task CreateOption()
    {
        ModalParameters parameters = new();
        parameters.Add(nameof(CreateProductOptionModal.ProductId), ProductId);
        parameters.Add(nameof(CreateProductOptionModal.Product), product);

        var modalRef = ModalService.Show<CreateProductOptionModal>("New Option", parameters);

        var result = await modalRef.Result;

        if (result.Cancelled) return;

        options.Add((ApiOption)result.Data);
    }

    async Task UpdateOption(ApiOption option)
    {
        ModalParameters parameters = new();
        parameters.Add(nameof(UpdateProductOptionModal.ProductId), ProductId);
        parameters.Add(nameof(UpdateProductOptionModal.Option), option);
        parameters.Add(nameof(UpdateProductOptionModal.Product), product);

        var modalRef = ModalService.Show<UpdateProductOptionModal>("Update Option", parameters);

        var result = await modalRef.Result;

        if (result.Cancelled) return;

        var index = options!.IndexOf(option);

        options[index] = (ApiOption)result.Data;
    }

    async Task DeleteOption(ApiOption option)
    {
        var modalRef = ModalService.ShowMessageBox("This cannot be undone.", "Delete the option?", yesText: "Yes", noText: "No");
        var modalResult = await modalRef.Result;
        if (modalResult.Cancelled || !(bool)modalResult.Data)
        {
            return;
        }

        await ProductsClient.DeleteProductOptionAsync(ProductId, option.Id);

        options.Remove(option);
    }

    async Task CreateVariant()
    {
        ModalParameters parameters = new();
        parameters.Add(nameof(CreateVariantModal.ProductId), ProductId);

        var modalRef = ModalService.Show<CreateVariantModal>("New Variant", parameters);

        var result = await modalRef.Result;

        if (result.Cancelled) return;

        variants.Add((ApiProductVariant)result.Data);
    }

    async Task UpdateVariant(ApiProductVariant variant)
    {
        ModalParameters parameters = new();
        parameters.Add(nameof(UpdateVariantModal.ProductId), ProductId);
        parameters.Add(nameof(UpdateVariantModal.Variant), variant);

        var modalRef = ModalService.Show<UpdateVariantModal>("Update Variant", parameters);

        var result = await modalRef.Result;

        if (result.Cancelled) return;

        var index = variants!.IndexOf(variant);

        variants[index] = (ApiProductVariant)result.Data;
    }

    async Task DeleteVariant(ApiProductVariant variant)
    {
        var modalRef = ModalService.ShowMessageBox("This cannot be undone.", "Delete the variant?", yesText: "Yes", noText: "No");
        var modalResult = await modalRef.Result;
        if (modalResult.Cancelled || !(bool)modalResult.Data)
        {
            return;
        }

        await ProductsClient.DeleteVariantAsync(ProductId, variant.Id);

        variants.Remove(variant);
    }

    async Task EditDetails()
    {
        ModalParameters parameters = new();
        parameters.Add(nameof(UpdateProductDetailsModal.ProductId), ProductId);
        parameters.Add(nameof(UpdateProductDetailsModal.Product), product);

        var modalRef = ModalService.Show<UpdateProductDetailsModal>("Update Details", parameters);

        var result = await modalRef.Result;

        if (result.Cancelled) return;

        product = await ProductsClient.GetProductAsync(ProductId);

        /*
        product.Name = data.Name;
        product.Description = data.Description;
        product.Sku = data.Sku;
        product.Price = data.Price;
        product.Group = data.GroupId;
        */

        //NavigationManager.NavigateTo($"/products/{product.Id}/edit", true);
    }

    class ProductVariantVm
    {
        public string? Id { get; set; }

        public string Name { get; set; }

        public string SKU { get; set; }

        public ApiOptionValue? SelectedValue { get; set; }

        public IEnumerable<ApiOptionValue> Values { get; set; } = null!;
    }
}