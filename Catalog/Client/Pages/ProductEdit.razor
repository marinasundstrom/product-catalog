@page "/products/{productId}/edit"
@inject NavigationManager NavigationManager
@inject IProductsClient ProductsClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Product</PageTitle>

@if (product is null)
{
    <span>Loading...</span>
}
else
{
    <PageTitle>@product.Name (@product.Sku)</PageTitle>

    <MudText Typo="Typo.h3" Align="Align.Center" Class="mb-12">@product.Name</MudText>

    <MudButton StartIcon="@Icons.Material.Filled.Link" Color="Color.Primary" Link="@($"/products/{product.Id}")">View product</MudButton>

    <MudGrid Spacing="6">
        <MudItem xs="12" sm="12" md="6" lg="6">
            <div class="card shadow-sm">
                @if (product.Image is not null)
                {
                    <img class="bd-placeholder-img card-img-top" style="width: 100%; height: 225px" src="@product.Image" />
                }
                else
                {
                    <svg class="bd-placeholder-img card-img-top" width="100%" height="225" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder: Thumbnail" preserveAspectRatio="xMidYMid slice" focusable="false"><title>Placeholder</title><rect width="100%" height="100%" fill="#55595c"></rect><text x="50%" y="50%" fill="#eceeef" dy=".3em">Thumbnail</text></svg>
                }
            </div>

            <InputFile id="fileInput" OnChange="UploadFiles" hidden accept="*.jpg, *.jpeg, *.png" />

            <MudButton HtmlTag="label"
                       Color="Color.Secondary"
                       StartIcon="@Icons.Filled.CloudUpload"
                       for="fileInput">
                Upload image
            </MudButton>

        </MudItem>

        <MudItem xs="12" sm="12" md="6" lg="6">

            <MudCard class="mb-4">
                <MudCardHeader>
                    <MudText Typo="Typo.h5" Align="Align.Center">Details</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <dl>
                        @if (!string.IsNullOrEmpty(product.Description))
                        {
                            <dt>Description</dt>
                            <dd>@product.Description</dd>
                        }

                        @if (product.Group is not null)
                        {
                            <dt>Group</dt>
                            <dd>@product.Group.Name</dd>
                        }

                        @if (!string.IsNullOrEmpty(product.Sku))
                        {
                            <dt>SKU</dt>
                            <dd>@product.Sku</dd>
                        }

                        @if (product.Price is not null)
                        {
                            <dt>Price</dt>
                            <dd>@product.Price?.ToString("c")</dd>
                        }
                    </dl>

                    <MudButton StartIcon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="EditDetails" Class="my-2">Edit details</MudButton>

                </MudCardContent>
            </MudCard>

        </MudItem>

    </MudGrid>

    <div class="form-group mb-4">
        <MudSelect T="ProductVisibility?" Label="Visibility" Variant="Variant.Outlined" Value="@product.Visibility" ValueChanged="async (e) => await UpdateVisibility((ProductVisibility?)e)" ToStringFunc="x => x?.ToString()">
            @foreach (var item in VisibilityOptions)
            {
                <MudSelectItem Value="@item" />
            }
        </MudSelect>
    </div>

    <MudText Typo="Typo.h4" Align="Align.Center" Class="mt-6 mb-2">Options</MudText>

    <div class="mb-4">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateOption" StartIcon="@Icons.Material.Filled.Add">Create option</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" Link="@($"/products/{product.Id}/options/groups")">Option groups</MudButton>
    </div>

    if (options is not null)
    {
        @foreach (var group in options
.ToList()
.GroupBy(x => x.Group?.Name))
        {
            @if (group.Key is not null)
            {
                <MudText Typo="Typo.h5" Align="Align.Left" Class="mb-2 mt-6">@group.Key</MudText>
            }

            <MudTable T="ApiOption" Items="@group" Dense="true" Hover="true" @ref="table" Class="mb-4">

                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Multiple values</MudTh>
                    <MudTh>Values</MudTh>
                    <MudTh>Default value</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>

                <RowTemplate Context="option">
                    <MudTd DataLabel="Name">@option.Name</MudTd>
                    <MudTd DataLabel="Multiple values">@(option.OptionType == OptionType.Multiple)</MudTd>
                    <MudTd DataLabel="Values">@string.Join(", ", option.Values.Select(x => x.Name))</MudTd>
                    <MudTd DataLabel="Default value">@option.DefaultValue?.Name</MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="async () => await UpdateOption(option)" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="async () => await DeleteOption(option)" />
                    </MudTd>
                </RowTemplate>

                <NoRecordsContent>
                    <MudText>No matching records found</MudText>
                </NoRecordsContent>

                <LoadingContent>
                    <MudText>Loading...</MudText>
                </LoadingContent>

            </MudTable>
        }
    }

    @if (product.HasVariants)
    {

        <MudText Typo="Typo.h4" Align="Align.Center" Class="mt-6 mb-2">Variants</MudText>

        @if (!options.Any())
        {
            <span>Add options before creating variants</span>
        }
        else
        {
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateVariant" StartIcon="@Icons.Material.Filled.Add">Create variant</MudButton>

            @if (variants is not null)
            {
                <MudTable T="ApiProductVariant" Items="@variants"
                          Dense="true" Hover="true" Class="mb-4">

                    <HeaderContent>
                        <MudTh><MudTableSortLabel SortLabel="nr_field" T="ApiProductVariant">Name</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortLabel="sign_field" T="ApiProductVariant">SKU</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortLabel="name_field" T="ApiProductVariant">Price</MudTableSortLabel></MudTh>

                        @if (variants is not null && variants.Any())
                        {
                            @foreach (var option in variants.First().Options)
                            {
                                <MudTh><MudTableSortLabel SortLabel="name_field" T="ApiProductVariant">@option.Name</MudTableSortLabel></MudTh>
                            }
                        }

                        <MudTh></MudTh>
                    </HeaderContent>

                    <RowTemplate Context="variant">
                        <MudTd DataLabel="Name">@variant.Name</MudTd>
                        <MudTd DataLabel="SKU">@variant.Sku</MudTd>
                        <MudTd DataLabel="SKU">@variant.Price?.ToString("c")</MudTd>

                        @if (variant.Options is not null)
                        {
                            foreach (var option in variant.Options)
                            {
                                <MudTd DataLabel="Name">@option.Value</MudTd>
                            }
                        }

                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="async () => await UpdateVariant(variant)" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="async () => await DeleteVariant(variant)" />
                        </MudTd>

                    </RowTemplate>

                    <NoRecordsContent>
                        <MudText>No matching records found</MudText>
                    </NoRecordsContent>

                    <LoadingContent>
                        <MudText>Loading...</MudText>
                    </LoadingContent>

                </MudTable>

            }
        }
    }
}

@code
{
    MudTable<ApiOption> table;

    ApiProduct? product;
    List<ApiProductVariant>? variants;
    List<ApiOption>? options;

    public IList<ProductVisibility?> VisibilityOptions { get; } = Enum.GetValues<ProductVisibility>().Select(x => (ProductVisibility?)x).ToArray();

    [Parameter]
    public string? ProductId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        product = await ProductsClient.GetProductAsync(ProductId);
        options = (await ProductsClient.GetProductOptionsAsync(ProductId)).ToList();

        variants = (await ProductsClient.GetVariantsAsync(ProductId)).ToList();
    }

    async Task UpdateVisibility(ProductVisibility? value)
    {
        try
        {
            await ProductsClient.UpdateProductVisibilityAsync(ProductId, value.GetValueOrDefault());

            product.Visibility = value;

            Snackbar.Add($"The product \"{product.Name}\" is now {product.Visibility.ToString().ToLower()}.", Severity.Success);
        }
        catch (Exception exc)
        {
            Snackbar.Add(exc.Message, Severity.Error);
        }
    }

    async Task CreateOption()
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(CreateProductOptionModal.ProductId), ProductId);
        parameters.Add(nameof(CreateProductOptionModal.Product), product);

        var modalRef = DialogService.Show<CreateProductOptionModal>("New Option", parameters);

        var result = await modalRef.Result;

        if (result.Cancelled) return;

        options.Add((ApiOption)result.Data);
    }

    async Task UpdateOption(ApiOption option)
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(UpdateProductOptionModal.ProductId), ProductId);
        parameters.Add(nameof(UpdateProductOptionModal.Option), option);
        parameters.Add(nameof(UpdateProductOptionModal.Product), product);

        var modalRef = DialogService.Show<UpdateProductOptionModal>("Update Option", parameters);

        var result = await modalRef.Result;

        if (result.Cancelled) return;

        var index = options!.IndexOf(option);

        options[index] = (ApiOption)result.Data;
    }

    async Task DeleteOption(ApiOption option)
    {
        var modalResult = await DialogService.ShowMessageBox("Delete the option?", "This cannot be undone.", yesText: "Yes", noText: "No");
        if (!modalResult.GetValueOrDefault())
        {
            return;
        }

        await ProductsClient.DeleteProductOptionAsync(ProductId, option.Id);

        options.Remove(option);
    }

    async Task CreateVariant()
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(CreateVariantModal.ProductId), ProductId);

        var modalRef = DialogService.Show<CreateVariantModal>("New Variant", parameters);

        var result = await modalRef.Result;

        if (result.Cancelled) return;

        variants.Add((ApiProductVariant)result.Data);
    }

    async Task UpdateVariant(ApiProductVariant variant)
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(UpdateVariantModal.ProductId), ProductId);
        parameters.Add(nameof(UpdateVariantModal.Variant), variant);

        var modalRef = DialogService.Show<UpdateVariantModal>("Update Variant", parameters);

        var result = await modalRef.Result;

        if (result.Cancelled) return;

        var index = variants!.IndexOf(variant);

        variants[index] = (ApiProductVariant)result.Data;
    }

    async Task DeleteVariant(ApiProductVariant variant)
    {
        var modalResult = await DialogService.ShowMessageBox("Delete the variant?", "This cannot be undone.", yesText: "Yes", noText: "No");
        if (!modalResult.GetValueOrDefault())
        {
            return;
        }

        await ProductsClient.DeleteVariantAsync(ProductId, variant.Id);

        variants.Remove(variant);
    }

    async Task EditDetails()
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(UpdateProductDetailsModal.ProductId), ProductId);
        parameters.Add(nameof(UpdateProductDetailsModal.Product), product);

        var modalRef = DialogService.Show<UpdateProductDetailsModal>("Update Details", parameters);

        var result = await modalRef.Result;

        if (result.Cancelled) return;

        product = await ProductsClient.GetProductAsync(ProductId);

        /*
        product.Name = data.Name;
        product.Description = data.Description;
        product.Sku = data.Sku;
        product.Price = data.Price;
        product.Group = data.GroupId;
        */

        //NavigationManager.NavigateTo($"/products/{product.Id}/edit", true);
    }

    private async void UploadFiles(InputFileChangeEventArgs e)
    {
        var file = e.GetMultipleFiles().First();
        product.Image = await ProductsClient.UploadProductImageAsync(product.Id, new FileParameter(file.OpenReadStream(3 * 1000000), file.Name));
    }

    class ProductVariantVm
    {
        public string? Id { get; set; }

        public string Name { get; set; }

        public string SKU { get; set; }

        public ApiOptionValue? SelectedValue { get; set; }

        public IEnumerable<ApiOptionValue> Values { get; set; } = null!;
    }
}
