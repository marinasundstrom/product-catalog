@page "/products/{productId}/edit"
@layout PageLayout
@inject IProductsClient ProductsClient
@inject IModalService ModalService

<PageTitle>Product</PageTitle>

@if (product is null)
{
    <span>Loading...</span>
}
else
{
    <PageTitle>@product.Name (@product.Sku)</PageTitle>

    <h3>@product.Name</h3>

    @*
        <label>
            <input type="checkbox" @bind-value="product.HasVariants" checked="@product.HasVariants" />
            Has variants
        </label>
    *@

    <button class="btn btn-secondary" @onclick="CreateOption">Create option</button>


    @if (options is not null)
    {
        if (options is not null)
        {
            @foreach (var group in options
               .ToList()
               .GroupBy(x => x.Group?.Name))
            {
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>@(group.Key ?? "Option")</th>
                            <th>Is selectable</th>
                            <th>Values</th>
                            <th>Default value</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var option in group)
                        {
                            <tr>
                                <td>@option.Name</td>
                                <td>@(!option.HasValues)</td>
                                <td>@string.Join(", ", option.Values.Select(x => x.Name))</td>
                                <td>@option.DefaultValue?.Name</td>
                                <td>
                                    <a href="#" @onclick:preventDefault @onclick="async () => await UpdateOption(option)"><i class="oi oi-pencil"></i></a>
                                    <a href="#" @onclick:preventDefault @onclick="async () => await DeleteOption(option)"><i class="oi oi-trash"></i></a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        }
    }

    @if (product.HasVariants)
    {

        <h4>Variants</h4>

        <button class="btn btn-secondary" @onclick="CreateVariant">Create variant</button>

        @if (variants is not null)
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>SKU</th>
                        <th>Price</th>

                        @if (variants is not null && variants.Any())
                        {
                            @foreach (var option in variants.First().Options)
                            {
                                <th>@option.Name</th>
                            }
                        }

                       <th></th>
                    </tr>
                </thead>
                <tbody>
                    @if (variants is not null)
                    {
                        @foreach (var variant in variants)
                        {
                    <tr>
                        <td>@variant.Name</td>
                        <td>@variant.Sku</td>
                        <td>@variant.Price?.ToString("c")</td>

                        @if (variant.Options is not null)
                        {
                            foreach (var option in variant.Options)
                            {
                                <td>@option.Value</td>
                            }
                        }

                        <td>
                            <a href="#" @onclick:preventDefault @onclick="async () => await UpdateVariant(variant)"><i class="oi oi-pencil"></i></a>
                            <a href="#" @onclick:preventDefault @onclick="async () => await DeleteVariant(variant)"><i class="oi oi-trash"></i></a>
                        </td>
                    </tr>
                        }
                    }
                </tbody>
            </table>
        }
    }
}

@code
{
    ApiProduct? product;
    List<ApiProductVariant>? variants;
    List<ApiOption>? options;

    [Parameter]
    public string? ProductId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        product = await ProductsClient.GetProductAsync(ProductId);
        options = (await ProductsClient.GetProductOptionsAsync(ProductId)).ToList();

        variants = (await ProductsClient.GetVariantsAsync(ProductId)).ToList();
    }

    async Task CreateOption()
    {
        ModalParameters parameters = new();
        parameters.Add(nameof(CreateVariantModal.ProductId), ProductId);

        var modalRef = ModalService.Show<CreateProductOptionModal>("New Option", parameters);

        var result = await modalRef.Result;

        if (result.Cancelled) return;

        options.Add((ApiOption)result.Data);
    }

    async Task UpdateOption(ApiOption option)
    {
        ModalParameters parameters = new();
        parameters.Add(nameof(UpdateProductOptionModal.ProductId), ProductId);
        parameters.Add(nameof(UpdateProductOptionModal.Option), option);

        var modalRef = ModalService.Show<UpdateProductOptionModal>("Update Option", parameters);

        var result = await modalRef.Result;

        if (result.Cancelled) return;

        var index = options!.IndexOf(option);

        options[index] = (ApiOption)result.Data;
    }

    async Task DeleteOption(ApiOption option)
    {
        await ProductsClient.DeleteProductOptionAsync(ProductId, option.Id);

        options.Remove(option);
    }

    async Task CreateVariant()
    {
        ModalParameters parameters = new();
        parameters.Add(nameof(CreateVariantModal.ProductId), ProductId);

        var modalRef = ModalService.Show<CreateVariantModal>("New Variant", parameters);

        var result = await modalRef.Result;

        if (result.Cancelled) return;

        variants.Add((ApiProductVariant)result.Data);
    }

    async Task UpdateVariant(ApiProductVariant variant)
    {
        ModalParameters parameters = new();
        parameters.Add(nameof(UpdateVariantModal.ProductId), ProductId);
        parameters.Add(nameof(UpdateVariantModal.Variant), variant);

        var modalRef = ModalService.Show<UpdateVariantModal>("Update Variant", parameters);

        var result = await modalRef.Result;

        if (result.Cancelled) return;

        var index = variants!.IndexOf(variant);

        variants[index] = (ApiProductVariant)result.Data;
    }

    async Task DeleteVariant(ApiProductVariant variant)
    {
        await ProductsClient.DeleteVariantAsync(ProductId, variant.Id);

        variants.Remove(variant);
    }

    class ProductVariantVm
    {
        public string? Id { get; set; }

        public string Name { get; set; }

        public string SKU { get; set; }

        public ApiOptionValue? SelectedValue { get; set; }

        public IEnumerable<ApiOptionValue> Values { get; set; } = null!;
    }
}