@using System.ComponentModel.DataAnnotations
@inject IProductsClient ProductsClient
@inject IToastService ToastService

<EditForm Model="@this" OnValidSubmit="OnSubmit">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label>Name</label>
        <InputText class="form-control" @bind-Value="Name" />
        <ValidationMessage For="() => Name" />
    </div>

    <div class="form-group">
        <label>Description</label>
        <InputTextArea class="form-control" @bind-Value="Description" />
        <ValidationMessage For="() => Description" />
    </div>

    <div class="form-group">
        <label>SKU</label>
        <InputText class="form-control" @bind-Value="SKU" />
        <ValidationMessage For="() => SKU" />
    </div>

    <div class="form-group">
        <label>Price</label>
        <InputNumber type="currency" class="form-control" @bind-Value="Price" />
        <ValidationMessage For="() => Price" />
    </div>

    <div class="form-group">
        @if (Options is not null)
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Option</th>
                        <th>Value</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Options is not null)
                    {
                        @foreach (var option in Options)
                        {
                            <tr>
                                <td>@option.Name</td>

                                @if (option.Values is not null)
                                {
                                    <td>
                                        <MySelect Items="option.Values" @bind-Value="option.SelectedValue" Selector="(x) => x.Name" />
                                    </td>
                                }
                            </tr>
                        }
                    }
                </tbody>
            </table>
        }
    </div>

    <div class="mt-4">
        <button type="button" @onclick="async () => await Modal.CancelAsync()" class="btn btn-secondary me-2">Cancel</button>

        <button class="btn btn-primary me-2">Create</button>
    </div>

</EditForm>

@code {
    [CascadingParameter] BlazoredModalInstance Modal { get; set; }

    [Parameter] public string ProductId { get; set; }

    [Required]
    public string Name { get; set; }

    public string Description { get; set; }

    [Required]
    public string SKU { get; set; }

    [Required]
    public decimal Price { get; set; }

    public List<OptionVM> Options = new List<OptionVM>();

    protected override async Task OnInitializedAsync()
    {
        var options = await ProductsClient.GetProductOptionsAsync(ProductId);
        foreach (var option in options)
        {
            var vm = new OptionVM()
            {
                Id = option.Id,
                Name = option.Name,
            };

            Options.Add(vm);

            vm.Values.AddRange(
                await ProductsClient.GetProductOptionValuesAsync(ProductId, option.Id));

            vm.SelectedValue = vm.Values.FirstOrDefault();
        }
    }

    async Task OnSubmit()
    {
        var data = new ApiCreateProductVariant
        {
            Name = Name,
            Description = Description,
            Sku = SKU,
            Price = Price,
            Values = new List<ApiCreateProductVariantOption>()
        };

        foreach (var option in Options)
        {
            var optionData = new ApiCreateProductVariantOption
            {
                OptionId = option.Id,
                ValueId = option.SelectedValue.Id,
            };

            data.Values.Add(optionData);
        }

        try
        {
            var result = await ProductsClient.CreateVariantAsync(ProductId, data);
            await Modal.CloseAsync(ModalResult.Ok(result));
        }
        catch (ApiException<ProblemDetails> exc)
        {
            ToastService.ShowError(exc.Result.Detail);
        }
    }

    public class OptionVM
    {
        public string Id { get; set; }

        public string Name { get; set; }

        public ApiOptionValue SelectedValue { get; set; }

        public List<ApiOptionValue> Values { get; set; } = new List<ApiOptionValue>();
    }
}

