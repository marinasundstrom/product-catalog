@using System.ComponentModel.DataAnnotations
@inject IProductsClient ProductsClient
@inject IModalService ModalService

<EditForm Model="@this" OnValidSubmit="OnSubmit">
    <ObjectGraphDataAnnotationsValidator />

    <div class="form-group">
        <label>Name</label>
        <InputText class="form-control" @bind-Value="Name" />
        <ValidationMessage For="() => Name" />
    </div>

    <div class="form-group">
        <label>Description</label>
        <InputTextArea class="form-control" @bind-Value="Description" />
        <ValidationMessage For="() => Description" />
    </div>

    @if (Groups is not null)
    {
        <div class="form-group">
            <label>Group</label>
            <MySelect Items="Groups" @bind-Value="Group" ShowDefaultOption="true" Selector="(x) => x?.Name" />
            <ValidationMessage For="() => Group" />
        </div>
    }

    @if (!Product.HasVariants)
    {
        <div class="form-group">
            <label>SKU</label>
            <InputText class="form-control" @bind-Value="SKU" />
            <ValidationMessage For="() => SKU" />
        </div>

        <div class="form-group">
            <label>Price</label>
            <InputNumber type="currency" class="form-control" @bind-Value="Price" />
            <ValidationMessage For="() => Price" />
        </div>

        <div class="form-check my-2">
            <InputCheckbox class="form-check-input" @bind-Value="HasMultipleChoices" />
            <label class="form-check-label">Has multiple choices</label>
        </div>
    }

    @if (HasMultipleChoices)
    {
        <h4 class="mt-4">Values</h4>

        <div class="form-group mb-2">
            <button type="button" class="btn btn-secondary" @onclick="AddValue">Add value</button>

            @if (Values.Any())
            {
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>SKU</th>
                            <th>Price</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var value in Values)
                        {
                            <tr>

                                <td>
                                    <InputText class="form-control" @bind-Value="value.Name" />
                                    <ValidationMessage For="() => value.Name" />
                                </td>

                                <td>
                                    <InputText class="form-control" @bind-Value="value.SKU" />
                                </td>

                                <td>
                                    <InputNumber type="currency" class="form-control" @bind-Value="value.Price" />
                                </td>

                                <td>
                                    <a href="#" @onclick:preventDefault @onclick="async () => await DeleteValue(value)"><i class="oi oi-trash"></i></a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    }

    <div class="mt-4">
        <button type="button" @onclick="async () => await Modal.CancelAsync()" class="btn btn-secondary me-2">Cancel</button>

        <button class="btn btn-primary me-2">Create</button>
    </div>

</EditForm>

@code {
    IList<ApiOptionGroup?> Groups { get; set; }

    [CascadingParameter] BlazoredModalInstance Modal { get; set; }

    [Parameter] public string ProductId { get; set; }

    [Parameter] public ApiProduct Product { get; set; }

    [Required]
    public string Name { get; set; }

    public bool HasMultipleChoices { get; set; }

    public string Description { get; set; }

    public ApiOptionGroup? Group { get; set; }

    public string? SKU { get; set; }

    public decimal? Price { get; set; }

    [ValidateComplexType]
    public List<OptionValueVM> Values { get; set; } = new List<OptionValueVM>();

    protected override async Task OnInitializedAsync()
    {
        Groups = (await ProductsClient.GetOptionGroupsAsync(ProductId)).Prepend(new ApiOptionGroup { Id = null, Name = "None" }).ToList();

        HasMultipleChoices = Product.HasVariants;
    }

    void AddValue()
    {
        Values.Add(new OptionValueVM());
    }

    async Task DeleteValue(OptionValueVM vm)
    {
        var modalRef = ModalService.ShowMessageBox("This cannot be undone.", "Delete the value?", yesText: "Yes", noText: "No");
        var modalResult = await modalRef.Result;
        if (modalResult.Cancelled || !(bool)modalResult.Data)
        {
            return;
        }

        Values.Remove(vm);
    }

    async Task OnSubmit()
    {
        var data = new ApiCreateProductOption
        {
            Name = Name,
            OptionType = HasMultipleChoices ? OptionType.Multiple : OptionType.Single,
            Description = Description,
            GroupId = Group?.Id,
            Sku = SKU,
            Price = Price,
            Values = HasMultipleChoices ? Values.Select(x => new ApiCreateProductOptionValue()
            {
                Name = x.Name,
                Sku = x.SKU,
                Price = x.Price
            }).ToList() : Array.Empty<ApiCreateProductOptionValue>().ToList()
        };

        var result = await ProductsClient.CreateProductOptionAsync(ProductId, data);
        await Modal.CloseAsync(ModalResult.Ok(result));
    }

    public class OptionValueVM
    {
        [Required]
        public string Name { get; set; }

        public string? SKU { get; set; }

        public decimal? Price { get; set; }
    }
}

