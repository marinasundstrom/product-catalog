@using System.ComponentModel.DataAnnotations
@inject IProductsClient ProductsClient
@inject IDialogService DialogService

<EditForm Model="@this" OnValidSubmit="OnSubmit">
    <ObjectGraphDataAnnotationsValidator />

    <MudDialog>
        <DialogContent>

            <MudTextField Label="Name" Class="mb-6" Variant="Variant.Outlined" @bind-Value="Name" For="() => Name" />

            <MudTextField Lines="3" Label="Description" Class="mb-6" Variant="Variant.Outlined" @bind-Value="Description" For="() => Description" />

            @if (Groups is not null)
            {
                <MudSelect T="ApiOptionGroup" Label="Group" Class="mb-6" Variant="Variant.Outlined" @bind-Value="Group" ToStringFunc="x => x?.Name"
                           For="() => Group">
                    @foreach (var item in Groups)
                    {
                        <MudSelectItem Value="@item" />
                    }
                </MudSelect>
            }

            @if (!Product.HasVariants)
            {
                <MudTextField Label="SKU" Class="mb-6" Variant="Variant.Outlined" @bind-Value="SKU" For="() => SKU" />

                <MudNumericField Label="Price" Class="mb-6" Variant="Variant.Outlined" @bind-Value="Price" For="() => Price" />

                <MudCheckBox Label="Has multiple choices" Class="mb-6" @bind-Checked="HasMultipleChoices" For="() => HasMultipleChoices" />
            }

            @if (HasMultipleChoices)
            {
                <MudText Typo="Typo.h6" Align="Align.Left" Class="mb-2">Values</MudText>

                <div class="form-group mb-2">
                    <MudButton Color="Color.Primary" OnClick="AddValue" StartIcon="@Icons.Material.Filled.Add">Add value</MudButton>

                    @if (Values.Any())
                    {
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>SKU</th>
                                    <th>Price</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var value in Values)
                                {
                                    <tr>
                                        <td>
                                            <MudTextField Class="mb-2" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="value.Name" For="() => value.Name" />
                                        </td>

                                        <td>
                                            <MudTextField Class="mb-2" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="value.SKU" For="() => value.SKU" />
                                        </td>

                                        <td>
                                            <MudNumericField Class="mb-2" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="value.Price" For="() => value.Price" />
                                        </td>

                                        <td>
                                            <MudIconButton Class="mb-2" Icon="@Icons.Material.Filled.Delete" OnClick="async () => await DeleteValue(value)" />
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
            }

        </DialogContent>
        <DialogActions>
            <MudButton OnClick="() => Modal.Cancel()">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Create</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    IList<ApiOptionGroup?> Groups { get; set; }

    [CascadingParameter] MudDialogInstance Modal { get; set; }

    [Parameter] public string ProductId { get; set; }

    [Parameter] public ApiProduct Product { get; set; }

    [Required]
    public string Name { get; set; }

    public bool HasMultipleChoices { get; set; }

    public string Description { get; set; }

    public ApiOptionGroup? Group { get; set; }

    public string? SKU { get; set; }

    public decimal? Price { get; set; }

    [ValidateComplexType]
    public List<OptionValueVM> Values { get; set; } = new List<OptionValueVM>();

    protected override async Task OnInitializedAsync()
    {
        Groups = (await ProductsClient.GetOptionGroupsAsync(ProductId)).Prepend(new ApiOptionGroup { Id = null, Name = "None" }).ToList();

        HasMultipleChoices = Product.HasVariants;
    }

    void AddValue()
    {
        Values.Add(new OptionValueVM());
    }

    async Task DeleteValue(OptionValueVM vm)
    {
        var modalResult = await DialogService.ShowMessageBox("Delete the value?", "This cannot be undone.", yesText: "Yes", noText: "No");
        if (!modalResult.GetValueOrDefault())
        {
            return;
        }

        Values.Remove(vm);
    }

    async Task OnSubmit()
    {
        var data = new ApiCreateProductOption
        {
            Name = Name,
            OptionType = HasMultipleChoices ? OptionType.Multiple : OptionType.Single,
            Description = Description,
            GroupId = Group?.Id,
            Sku = SKU,
            Price = Price,
            Values = HasMultipleChoices ? Values.Select(x => new ApiCreateProductOptionValue()
            {
                Name = x.Name,
                Sku = x.SKU,
                Price = x.Price
            }).ToList() : Array.Empty<ApiCreateProductOptionValue>().ToList()
        };

        var result = await ProductsClient.CreateProductOptionAsync(ProductId, data);
        Modal.Close(DialogResult.Ok(result));
    }

    public class OptionValueVM
    {
        [Required]
        public string Name { get; set; }

        public string? SKU { get; set; }

        public decimal? Price { get; set; }
    }
}

