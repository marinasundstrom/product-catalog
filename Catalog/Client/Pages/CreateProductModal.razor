@using System.ComponentModel.DataAnnotations
@inject IProductsClient ProductsClient

<EditForm Model="@this" OnValidSubmit="OnSubmit">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label>Name</label>
        <InputText class="form-control" @bind-Value="Name" />
        <ValidationMessage For="() => Name" />
    </div>

    <div class="form-group">
        <label>Description</label>
        <InputTextArea class="form-control" @bind-Value="Description" />
        <ValidationMessage For="() => Description" />
    </div>

    @if (Group is not null)
    {
        <div class="form-group">
            <label>Group</label>
            <MySelect Items="Groups" ShowDefaultOption="true" @bind-Value="Group" Selector="(x) => x?.Name" />
            <ValidationMessage For="() => Group" />
        </div>
    }

    <div class="form-check my-2">
        <InputCheckbox class="form-check-input" @bind-Value="HasVariants" />
        <label class="form-check-label">Has variants</label>
    </div>

    @if (!HasVariants)
    {
        <div class="form-group">
            <label>SKU</label>
            <InputText class="form-control" @bind-Value="SKU" />
            <ValidationMessage For="() => SKU" />
        </div>

        <div class="form-group">
            <label>Price</label>
            <InputNumber type="currency" class="form-control" @bind-Value="Price" />
            <ValidationMessage For="() => Price" />
        </div>
    }

    <div class="mt-4">
        <button type="button" @onclick="async () => await Modal.CancelAsync()" class="btn btn-secondary me-2">Cancel</button>

        <button class="btn btn-primary me-2">Create</button>
    </div>

</EditForm>

@code {
    public IList<ApiProductGroup> Groups { get; set; }

    [CascadingParameter] BlazoredModalInstance Modal { get; set; }

    [Required]
    public string Name { get; set; }

    public bool HasVariants { get; set; }

    public string? Description { get; set; }

    public ApiProductGroup Group { get; set; }

    public string? SKU { get; set; }

    public decimal? Price { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var groups = await ProductsClient.GetProductGroupsAsync(true);
        Groups = groups.ToList();
        Group = groups.First();
    }

    async Task OnSubmit()
    {
        ApiCreateProduct data = new () {
            Name = Name,
            HasVariants = HasVariants,
            Description = Description,
            Sku = SKU,
            Price = Price
        };

        var result = await ProductsClient.CreateProductAsync(data);
        await Modal.CloseAsync(ModalResult.Ok(result));
    }
}

