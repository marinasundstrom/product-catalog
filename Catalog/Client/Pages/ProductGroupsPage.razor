@page "/products/groups"
@inject IProductsClient ProductsClient
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<PageTitle>Product Groups</PageTitle>

<MudText Typo="Typo.h3" Align="Align.Center" Class="mb-12">Product Groups</MudText>

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateGroup" StartIcon="@Icons.Material.Filled.Add" Class="my-2">Create group</MudButton>

<MudTable T="ApiProductGroup" Items="productGroups"
          Dense="true" Hover="true">
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Description</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate Context="group">
        <MudTd DataLabel="Name">@group.Name</MudTd>
        <MudTd DataLabel="Description">@group.Description</MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="async () => await UpdateGroup(group)" />
            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="async () => await DeleteGroup(group)" />
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
</MudTable>

@code
{
    List<ApiProductGroup>? productGroups;

    [Parameter]
    public string? ProductId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        productGroups = (await ProductsClient.GetProductGroupsAsync(true)).ToList();
    }

    async Task CreateGroup()
    {
        DialogParameters parameters = new();

        var modalRef = DialogService.Show<CreateProductGroupModal>("Create Group", parameters);

        var result = await modalRef.Result;

        if (result.Cancelled) return;

        productGroups.Add((ApiProductGroup)result.Data);
    }

    async Task UpdateGroup(ApiProductGroup productGroup)
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(UpdateProductGroupModal.ProductGroup), productGroup);

        var modalRef = DialogService.Show<UpdateProductGroupModal>("Update Group", parameters);

        var result = await modalRef.Result;

        if (result.Cancelled) return;

        var index = productGroups!.IndexOf(productGroup);

        productGroups[index] = (ApiProductGroup)result.Data;
    }

    async Task DeleteGroup(ApiProductGroup productGroup)
    {
        var modalResult = await DialogService.ShowMessageBox("Delete the group?", "The group will be deleted, but the options will remain.\nThis cannot be undone.", yesText: "Yes", noText: "No");
        if (!modalResult.GetValueOrDefault())
        {
            return;
        }

        await ProductsClient.DeleteProductGroupAsync(productGroup.Id);

        productGroups.Remove(productGroup);
    }
}

